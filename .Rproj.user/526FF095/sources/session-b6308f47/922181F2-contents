---
title: "Aula 2 - Importação de dados e criação de gráficos simples"
author: "Caio"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Aula 2

Nesta aula serão apresentadas formas de se importar (carregar) dados/ planilhas, a partir de diferentes fontes, e como fazer uma análise visual rápida dos dados obtidos.

## Importando dados/ planilhas

Os dados/ planilhas podem ser obtidos de diferentes formas.\
Inicialmente, será carregado um conjunto de dados presente em um pacote do R (**`ec50estimator`**):

```{r}
#| warning: false
#| error: false

library(ec50estimator)

df1 <- multi_isolate
head(df1)
```

\
Uma outra maneira, é carregar dados de uma planilha em Excel. Para isso, existem duas alternativas. A primeira faz uso do pacote **`readxl`**.\
\
OBS.: Para as opções apresentadas a seguir, é importante mencionar que o arquivo a ser importado deve estar dentro da pasta do projeto.

```{r}
#| warning: false
#| error: false

library(readxl)
df2 <- read_excel("dados-diversos.xlsx")
head(df2)
```

\
Quando uma planilha possui mais de uma guia, é necessário indicar na função qual a guia que desejamos importar:

```{r}
#| warning: false
#| error: false

df21 <- read_excel("dados-diversos.xlsx", sheet = "escala")
head(df21)
```

\
A segunda forma de importação, faz uso do pacote **`tidyverse`**, com a função `read_csv`:

```{r}
#| warning: false
#| error: false

library(tidyverse)
df3 <- read_csv("dados-diversos.csv")
head(df3)
```

\
A terceira forma de se carregar dados é a partir de uma planilha google, disponível online.\
Para isso, fazemos uso do pacote **`gsheet`**:

```{r}
#| warning: false
#| error: false

library(gsheet)
df4 <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit#gid=921203844")
head(df4)


df5 <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit#gid=517586736")
head(df5)
```

## Uso do `tidyverse` (`ggplot2`) para visualização rápida dos dados

A seguir os pacotes **`tidyverse`**, **`ggplot2`** e **`ggthemes`** serão utilizados para gerar um gráfico e possibilitar uma visualização rápida de um determinado dataframe carregado.

```{r}
#| warning: false
#| error: false


library(tidyverse)
library(ggplot2)
library(ggthemes)
```

\
Inicialmente, será feito um gráfico simples de pontos. O objetivo é plotar as observações, de acordo com os tratamentos, e conhecer a distribuição dos dados de um determinado data frame (df4):

```{r}
#| warning: false
#| error: false

g1 <- df4 %>% 
  ggplot(aes(trat, comp))+
  geom_point()

g1
```

\
Um segundo gráfico simples, de outro conjunto de dados:

```{r}
#| warning: false
#| error: false

g2 <- df1 %>%
  ggplot(aes(growth))+
  geom_histogram()

g2
```

\
A seguir, será feito um novo plot. Este, consistirá de um gráfico do tipo boxplot, acrescido de pontos dispersos:

```{r}
#| warning: false
#| error: false

g3 <- df4 %>%
  ggplot(aes(trat, comp))+
  geom_boxplot(outlier.alpha = 0)+
  geom_jitter(width = 0.07,
              color = "black",
              shape = 1,
              size = 2)+
  scale_y_continuous(limits = c(0,20), n.breaks = 10)+
  #ylim(0,20)+
  labs(x = "Tratamento", y = "Comprimento", title = "Boxplot", caption = "Fonte: Primeiro Boxplot")+
  theme_clean()

g3
```

\
Por fim, para salvar os gráficos gerados, podemos utilizar a função `ggsave`. Porém, essa função salvará o último gráfico gerado.

```{r}
#| eval: false

ggsave("Boxplot.png", bg="transparent")
```

\
Outra opção para salvar plots gerados anteriormente é a seguinte:

```{r}
#| eval: false

#Em .pdf:
pdf("histograma.pdf", bg = "transparent")
print(g2)
dev.off()

#Em .png:
png("Pontos.png", bg = "transparent")
print(g1)
dev.off()
```
