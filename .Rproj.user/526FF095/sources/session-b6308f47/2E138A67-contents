---
title: "Aula 1 - Criação de projetos, documentos, conjunto de dados e manipulações"
author: "Caio"
format: html
editor: visual
---

# Aula 1

Nessa primeira aula será feita uma breve introdução aos softwares R e RStudio, apresentando como criar projetos, scripts e arquivos e como salvá-los. Além disso, será demonstrado como instalar e carregar pacotes e criar vetores, data frames e realizar operações básicas no RStudio.\

## Criação do projeto

Inicialmente, será criado um projeto, onde serão mantidos todos os arquivos da disciplina. Para isso, bastar clicar em:

 \> "File"

  \> "New Project..."

   \> "New Directory"

    \> "New Project".\
     Nessa parte, é dado um nome ao projeto e escolhida a pasta em que ele será mantido. Feito isso, prosseguimos, clicando em "Create Project".\

## Criação dos scripts e documentos

### Scripts

O script é o local onde são desenvolvidos e salvos os códigos. Para criar um novo script no RStudio, clique em:\
 \> "File"

  \> "New File"

   \> "R Script"\

### Documentos

Ao longo da disciplina, as atividades desenvolvidas serão salvas em documentos. O objetivo é permitir que os códigos desenvolvidos, as análises realizadas e os resultados obtidos, junto com as interpretações e comentários, sejam mantidos em um mesmo arquivo (documento), facilitando o acesso e entendimento do que foi feito.\
Os formatos dos documentos que podem ser utilizados são "R Markdown" (.rmd) e "Quarto document" (.qmd). Daremos preferência ao último.\
Portanto, para criar um novo documento em ".qmd", seguiremos o seguinte caminho:\
 \> "File"

  \> "New File"

   \> "Quarto document..."\
    Nessa janela, será dado um título ao arquivo, o nome do autor e em seguida, seleciona-se "Create".

O novo documento será salvo na pasta do projeto, criado anteriormente.\

## Instalando e carregando pacotes

Os pacotes são fundamentais para o funcionamento do RStudio, pois contém funções que serão utilizadas em várias análises no decorrer da disciplina.

Um pacote pode ser instalado manualmente, clicando em:\
 \> "Packages"\
  \> "Install"\
    \> Na linha "Packages", digite o nome do pacote de interesse, por exemplo, "Agricolae".\
    \> Em sequência, clique em "Install"

Outra opção, é realizar a instalação com uma fórmula, como segue:

```{r}
#| warning: false
#| message: false
#| eval: false

install.packages("ggplot2")
```

Após a instalação, é preciso carregar o pacote, para isso:

```{r}
#| warning: false
#| message: false
#| error: false

library(ggplot2)
```

## Criando vetores

Para trabalhar no R, algumas vezes devemos criar vetores, segue alguns exemplos simples de como o fazer:

```{r}
x <- 5
x
```

Também é possível criar um vetor com um conjunto de valores:

```{r}
A <- c(1:20)
A
```

No RStudio, também é possível realizar operações com os vetores criados, por exemplo

```{r}
y <- x^2
y
```

```{r}
z <- y-2*x
z
```

```{r}
B <- A*5
B
```

## Criando data frames

Para criação de dataframes, é utilizada a função `data.frame`. Primeiros é dado um nome ao objeto (df), em sequência especificamos o que será colocado nele (os vetores A e B).

```{r}
df <- data.frame(A,B)
df
```

## Manipulação de dados

Para manipulação de dados e/ou data frames, é possível adotar funções presentes no pacote **`dplyr`**. Alguns exemplos.

```{r}
#| warning: false
#| message: false
#| error: false
library(dplyr)
```

### Função `mutate`

Essa função é capaz de criar novas colunas em função das já existentes. Além disso, com ela é possível modificar e deletar colunas.

```{r}
df <- df %>% 
  mutate(C = A*0.5,
         D = A^2,
         E = B*C*A)
df
```

Para deletar colunas:

```{r}
df <- df %>% 
  mutate(C = NULL)
df
```

### Função `rename`

Essa função permite alterar o nome atribuído as colunas, usando a seguinte ordem: `nome novo = nome antigo`. Por exemplo:

```{r}
df <- df %>% 
  rename(C = E)
df
```

### Função `select`

Com essa função, é possível criar um novo data frame, selecionado colunas de um data frame já existente, por exemplo:

```{r}
df2 <- df %>% 
  select(A, B, C)
df2
```

Se for utilizado o operador `:`, serão selecionadas todas as colunas entre o intervalo especificado, por exemplo:

```{r}
df3 <- df %>% 
  select(B:C)
df3
```

### Função `arrange`

Essa função ordena as linhas de um data frame em função dos valores das colunas selecionadas. Por exemlo:

```{r}
df2 %>% 
  arrange(A,C)
```

Ou em ordem decrescente, com o argumento `desc`:

```{r}
df2 %>% 
  arrange(desc(A))
```

### Função `filter`

Com essa função é possível filtrar linhas do data frame que satisfaçam uma condição específica. Por exemplo:

```{r}
df4 <- df2 %>% 
  filter(A >= 5)
df4


df5 <- df2 %>% 
  filter(A < 5)
df5


df6 <- df2 %>% 
  filter(A == 5)
df6
```

### Função `summarise`

Com essa função é possível selecionar uma coluna de interesse e obter medidas estatísticas dela. Com isso é criado um novo data frame as medidas selecionadas. Alguns exemplos:

```{r}
summ <- df2 %>% 
  summarise(media = mean (A),
            mediana = median(A),
            sd = sd(A),
            min = min(A),
            max = max(A))
summ
```
