---
title: "Manipulações de dados"
author: "Caio"
format: html
editor: visual
---

```{r}
#| warning: false
#| message: false
#| eval: false
#| echo: false
#| include: false
install.packages("ggplot2")
```

```{r}
#| warning: false
#| message: false
#| error: false
#| echo: false
#| include: false

library(ggplot2)
```

```{r}
#| echo: false
#| include: false

x <- 5
x
```

```{r}
#| echo: false
#| include: false
A <- c(1:20)
A
```

```{r}
#| echo: false
#| include: false
y <- x^2
y
```

```{r}
#| echo: false
#| include: false
z <- y-2*x
z
```

```{r}
#| echo: false
#| include: false
B <- A*5
B
```

```{r}
#| echo: false
#| include: false
df <- data.frame(A,B)
df
```

## Manipulação de dados

Para manipulação de dados e/ou data frames, é possível adotar funções presentes no pacote **`dplyr`**. Alguns exemplos.

```{r}
#| warning: false
#| message: false
#| error: false
library(dplyr)
```

### Função `mutate`

Essa função é capaz de criar novas colunas em função das já existentes. Além disso, com ela é possível modificar e deletar colunas.

```{r}
df <- df %>% 
  mutate(C = A*0.5,
         D = A^2,
         E = B*C*A)
df
```

Para deletar colunas:

```{r}
df <- df %>% 
  mutate(C = NULL)
df
```

### Função `rename`

Essa função permite alterar o nome atribuído as colunas, usando a seguinte ordem: `nome novo = nome antigo`. Por exemplo:

```{r}
df <- df %>% 
  rename(C = E)
df
```

### Função `select`

Com essa função, é possível criar um novo data frame, selecionado colunas de um data frame já existente, por exemplo:

```{r}
df2 <- df %>% 
  select(A, B, C)
df2
```

Se for utilizado o operador `:`, serão selecionadas todas as colunas entre o intervalo especificado, por exemplo:

```{r}
df3 <- df %>% 
  select(B:C)
df3
```

### Função `arrange`

Essa função ordena as linhas de um data frame em função dos valores das colunas selecionadas. Por exemlo:

```{r}
df2 %>% 
  arrange(A,C)
```

Ou em ordem decrescente, com o argumento `desc`:

```{r}
df2 %>% 
  arrange(desc(A))
```

### Função `filter`

Com essa função é possível filtrar linhas do data frame que satisfaçam uma condição específica. Por exemplo:

```{r}
df4 <- df2 %>% 
  filter(A >= 5)
df4


df5 <- df2 %>% 
  filter(A < 5)
df5


df6 <- df2 %>% 
  filter(A == 5)
df6
```

### Função `summarise`

Com essa função é possível selecionar uma coluna de interesse e obter medidas estatísticas dela. Com isso é criado um novo data frame as medidas selecionadas. Alguns exemplos:

```{r}
summ <- df2 %>% 
  summarise(media = mean (A),
            mediana = median(A),
            sd = sd(A),
            min = min(A),
            max = max(A))
summ
```
