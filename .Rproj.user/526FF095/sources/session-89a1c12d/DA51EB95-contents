---
title: "Aula 4 - Uso do datapasta e tabela de contingência"
author: "Caio"
format: html
editor: visual
execute: 
  error: false
  warning: false
---

# Aula 4

## Carregando os pacotes

Inicialmente, serão instalados (**`datapasta`** e **`janitor`**) e carregados os pacotes que serão necessários durante esta aula:

```{r}
#| eval: false
install.packages("datapasta")
install.packages("janitor")
```

```{r}
library(datapasta)
library(janitor)
library(tidyverse)
library(ggthemes)
```

## Pacote `datapasta`

O pacote `datapasta` fornece ao RStudio funções adicionais que permitem copiar e colar dados de outras fontes.

Para usá-lo é preciso criar um novo chunk, copiar os valores desejados, clicar em `Addins` e selecionar o formato em que os valores serão colados.

### *Paste as vector*

Para colar valores como um vetor, seleciona-se "*Paste as vector*"

```{r}
vet <- c("comp", "9", "12.5", "10", "8", "13.2", "11", "10.8", "9.5", "10.8", "10.4", "13.72", "15.91", "15.7", "14.2", "15.9", "16.54", "18", "14.4", "16.41", "16")

```

### *Paste as data.frame*

Além disso, também é possível colar valores como um data frame. Nesse caso, valores presentes em mais de uma coluna são copiados e colados selecionando a função "*Paste as data.frame*":

```{r}
dat <- data.frame(
  stringsAsFactors = FALSE,
                     trat = c("Mg2","Mg2",
                              "Mg2","Mg2","Mg2","Mg2","Mg2","Mg2","Mg2",
                              "Mg2","control","control","control","control",
                              "control","control","control","control","control",
                              "control"),
                      rep = c(1L,2L,3L,4L,
                              5L,6L,7L,8L,9L,10L,1L,2L,3L,4L,5L,6L,7L,
                              8L,9L,10L),
                     comp = c(9,12.5,10,8,
                              13.2,11,10.8,9.5,10.8,10.4,13.72,15.91,15.7,
                              14.2,15.9,16.54,18,14.4,16.41,16))

dat
```

### *Paste as tribble*

Outra opção para criar um novo data frame é colar utilizando a opção "*Paste as tribble*":

```{r}

dat2 <- tibble::tribble(
      ~trat, ~rep, ~comp,
      "Mg2",   1L,     9,
      "Mg2",   2L,  12.5,
      "Mg2",   3L,    10,
      "Mg2",   4L,     8,
      "Mg2",   5L,  13.2,
      "Mg2",   6L,    11,
      "Mg2",   7L,  10.8,
      "Mg2",   8L,   9.5,
      "Mg2",   9L,  10.8,
      "Mg2",  10L,  10.4,
  "control",   1L, 13.72,
  "control",   2L, 15.91,
  "control",   3L,  15.7,
  "control",   4L,  14.2,
  "control",   5L,  15.9,
  "control",   6L, 16.54,
  "control",   7L,    18,
  "control",   8L,  14.4,
  "control",   9L, 16.41,
  "control",  10L,    16
  )

dat2
```

A função tribble também pode ser utilizada para colar dados obtidos da internet.\
Exemplo 1:

```{r}
dat3 <- tibble::tribble(
  ~Estado, ~Cidade, ~Pop.2010, ~Pop.2022, ~Variacao,
  "MG",            "Serra.da.Saudade", 815, 833,  "2,20%",
  "SP",                       "Bora",    805,    907,  "12,70%",
  "GO",                 "Anhanguera",   1.02,    924,  "-9,40%",
  "MT",                 "Araguainha",  1.096,   1.01,  "-7,80%",
  "SP",              "Nova Castilho",  1.125,  1.062,  "-5,60%",
  "MG",            "Cedro do Abaete",   1.21,  1.081, "-10,70%",
  "RS",             "Andre da Rocha",  1.216,  1.135,  "-6,70%",
  "TO",         "Oliveira de Fátima",  1.037,  1.164,  "12,20%",
  "RS",             "União da Serra",  1.487,   1.17, "-21,30%",
  "MG", "São Sebastião do Rio Preto",  1.613,  1.259, "-21,90%",
  "RS",             "Coqueiro Baixo",  1.528,   1.29, "-15,60%",
  "RS",              "Engenho Velho",  1.527,  1.296, "-15,10%"
  )

dat3
```

\
Exemplo 2:

```{r}
dat4 <- tibble::tribble(
  ~Ranking,       ~País, ~`Produção.em.2022/23.(milhões.de.sacos.de.60.kg)`, ~Participação.total.no.mercado,
  "1","Brasil",664,"38,1 %",
  "2","Vietnã",311,"17,8%",
  "3","Colômbia",116,"6,7%",
  "4","Indonésia",97,"5,6%",
  "5","Etiópia",835,"4,8%",
  "Total","Mundo",170019,"100%")

dat4
```

### Trabalhando com alguns dados

#### Importando

Utilizando a função "*paste as tribble"*, os dados presentes neste link (<https://r4pde.net/temporal-fitting.html#entering-data> - seção 10.4) serão importados:

```{r}
pepper <- 
  tribble(
   ~t,  ~`1`,  ~`2`,  ~`3`,
   0,  0.08, 0.001, 0.001,
   7,  0.13,  0.01, 0.001,
  14,  0.78,  0.09,  0.01,
  21,  0.92,  0.25,  0.05,
  28,  0.99,   0.8,  0.18,
  35, 0.995,  0.98,  0.34,
  42, 0.999,  0.99,  0.48,
  49, 0.999, 0.999,  0.74
  )

pepper
```

#### Convertendo

Visualizando os dados importados acima, é possível notar que eles estão no formato largo. Logo, será preciso transformá-los para o formato longo. Para isso, será utilizada a função `pivot_longer (tidyr)`. Indicamos quais colunas serão transformadas para o formato longo e atribuímos nomes às novas colunas:

```{r}
pepper2 <- pepper %>% 
  pivot_longer(2:4,
               names_to = "epidemic",
               values_to = "inc")

pepper2
```

#### Construindo gráfico

Em seguida, com pacote `ggplot2`, será feito um gráfico de pontos e linhas a partir dos dados carregados:

```{r}

pepper2 %>% 
  ggplot(aes(t, inc, color = epidemic))+
  geom_point()+
  geom_line()+
  annotate(geom = "text",
           x = 12,
           y = 0.75,
           label = "1")+
  annotate(geom = "text",
           x = 22,
           y = 0.50,
           label = "2")+
   annotate(geom = "text",
           x = 32,
           y = 0.35,
           label = "3")+
  theme_grey()+
  theme(legend.position = "none")
```

## Tabela de contingência

A seguir, serão construídas tabelas de contingências. São tabelas que permitem fazer contagens de elementos/ ocorrências de variáveis categóricas dentro de uma mesma coluna rapidamente.

### Carregando os dados

Os dados utilizados neste exemplo serão obtidos de uma planilha on-line:

```{r}
cr <- read.csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")
```

### Utilizando a função `count`

Utilizando a função `count` `(dplyr)` é possível contar os valores únicos (níveis) dentro de uma coluna específica (fator).

```{r}
cr %>%
  count(region)

cr %>% 
  count(zone)
```

\
Também é possível contar as ocorrências únicas combinando dois fatores.

```{r}
cr %>%
  count(region,zone)
```

### Utilizando a função `tabyl`

Dentro do pacote `janitor` há a função `tabyl`, que gera uma tabela de frequências

```{r}
cr %>% 
  tabyl(region)

cr %>% 
  tabyl(cultivar, farm_management)
```

### Gráficos de barras (colunas)

Para avaliar visualmente a ocorrência dos tipos de manejo para cada cultivar, construiremos um gráfico de barras:

```{r}
cr %>%
  count(farm_management, cultivar) %>% 
  ggplot(aes(cultivar, n, fill = farm_management))+
  geom_col(position = "dodge2")
```

Também é possível construir um gráfico com a mesma ideia utilizando a função `facet_wrap`:

```{r}
cr %>%
  count(farm_management, cultivar) %>% 
  ggplot(aes(cultivar, n, fill = farm_management, label = n))+
  geom_col(position = "dodge2")+
  geom_text(position = position_dodge(width = 0.9))+
  theme_bw()+
  facet_wrap(~cultivar, scales = "free_x")+
    theme(strip.text.x = element_blank(),
          legend.position = "top")
```

\
\_\_\_\_\_\_\_\_\_\_\_

```{r}
library(gsheet)
data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit#gid=921203844")
```

```{r}
data %>%
  group_by(trat) %>%
  ggplot(aes(trat, comp))+
  geom_jitter(width = 0.1)
```

```{r}
data %>%
  group_by(trat) %>%
  summarise(mean_comp = mean(comp),
            sd_comp = sd(comp)) %>%
  ggplot(aes(trat, mean_comp))+
  #geom_col(fill = "steelblue", width = 0.5)+
  geom_point(size = 2)+
  ylim (5,20)+
  geom_errorbar(aes(ymin = mean_comp - sd_comp,
                    ymax = mean_comp + sd_comp),
                width = 0.2)+
  annotate(geom = "text",
           x = 1,
           y = 18,
           label = "*", size =5)+
  labs(
    y = "Mean Comp")
```
