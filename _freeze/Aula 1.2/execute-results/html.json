{
  "hash": "0fdb5074c0ca3bfa95a0cac754a86a2f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aula 1\"\nformat: html\neditor: visual\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Manipulação de dados\n\nPara manipulação de dados e/ou data frames, é possível adotar funções presentes no pacote **`dplyr`**. Alguns exemplos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n### Função `mutate`\n\nEssa função é capaz de criar novas colunas em função das já existentes. Além disso, com ela é possível modificar e deletar colunas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(C = A*0.5,\n         D = A^2,\n         E = B*C*A)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B    C   D       E\n1   1   5  0.5   1     2.5\n2   2  10  1.0   4    20.0\n3   3  15  1.5   9    67.5\n4   4  20  2.0  16   160.0\n5   5  25  2.5  25   312.5\n6   6  30  3.0  36   540.0\n7   7  35  3.5  49   857.5\n8   8  40  4.0  64  1280.0\n9   9  45  4.5  81  1822.5\n10 10  50  5.0 100  2500.0\n11 11  55  5.5 121  3327.5\n12 12  60  6.0 144  4320.0\n13 13  65  6.5 169  5492.5\n14 14  70  7.0 196  6860.0\n15 15  75  7.5 225  8437.5\n16 16  80  8.0 256 10240.0\n17 17  85  8.5 289 12282.5\n18 18  90  9.0 324 14580.0\n19 19  95  9.5 361 17147.5\n20 20 100 10.0 400 20000.0\n```\n\n\n:::\n:::\n\n\nPara deletar colunas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(C = NULL)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B   D       E\n1   1   5   1     2.5\n2   2  10   4    20.0\n3   3  15   9    67.5\n4   4  20  16   160.0\n5   5  25  25   312.5\n6   6  30  36   540.0\n7   7  35  49   857.5\n8   8  40  64  1280.0\n9   9  45  81  1822.5\n10 10  50 100  2500.0\n11 11  55 121  3327.5\n12 12  60 144  4320.0\n13 13  65 169  5492.5\n14 14  70 196  6860.0\n15 15  75 225  8437.5\n16 16  80 256 10240.0\n17 17  85 289 12282.5\n18 18  90 324 14580.0\n19 19  95 361 17147.5\n20 20 100 400 20000.0\n```\n\n\n:::\n:::\n\n\n### Função `rename`\n\nEssa função permite alterar o nome atribuído as colunas, usando a seguinte ordem: `nome novo = nome antigo`. Por exemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  rename(C = E)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B   D       C\n1   1   5   1     2.5\n2   2  10   4    20.0\n3   3  15   9    67.5\n4   4  20  16   160.0\n5   5  25  25   312.5\n6   6  30  36   540.0\n7   7  35  49   857.5\n8   8  40  64  1280.0\n9   9  45  81  1822.5\n10 10  50 100  2500.0\n11 11  55 121  3327.5\n12 12  60 144  4320.0\n13 13  65 169  5492.5\n14 14  70 196  6860.0\n15 15  75 225  8437.5\n16 16  80 256 10240.0\n17 17  85 289 12282.5\n18 18  90 324 14580.0\n19 19  95 361 17147.5\n20 20 100 400 20000.0\n```\n\n\n:::\n:::\n\n\n### Função `select`\n\nCom essa função, é possível criar um novo data frame, selecionado colunas de um data frame já existente, por exemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df %>% \n  select(A, B, C)\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B       C\n1   1   5     2.5\n2   2  10    20.0\n3   3  15    67.5\n4   4  20   160.0\n5   5  25   312.5\n6   6  30   540.0\n7   7  35   857.5\n8   8  40  1280.0\n9   9  45  1822.5\n10 10  50  2500.0\n11 11  55  3327.5\n12 12  60  4320.0\n13 13  65  5492.5\n14 14  70  6860.0\n15 15  75  8437.5\n16 16  80 10240.0\n17 17  85 12282.5\n18 18  90 14580.0\n19 19  95 17147.5\n20 20 100 20000.0\n```\n\n\n:::\n:::\n\n\nSe for utilizado o operador `:`, serão selecionadas todas as colunas entre o intervalo especificado, por exemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- df %>% \n  select(B:C)\ndf3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     B   D       C\n1    5   1     2.5\n2   10   4    20.0\n3   15   9    67.5\n4   20  16   160.0\n5   25  25   312.5\n6   30  36   540.0\n7   35  49   857.5\n8   40  64  1280.0\n9   45  81  1822.5\n10  50 100  2500.0\n11  55 121  3327.5\n12  60 144  4320.0\n13  65 169  5492.5\n14  70 196  6860.0\n15  75 225  8437.5\n16  80 256 10240.0\n17  85 289 12282.5\n18  90 324 14580.0\n19  95 361 17147.5\n20 100 400 20000.0\n```\n\n\n:::\n:::\n\n\n### Função `arrange`\n\nEssa função ordena as linhas de um data frame em função dos valores das colunas selecionadas. Por exemlo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 %>% \n  arrange(A,C)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B       C\n1   1   5     2.5\n2   2  10    20.0\n3   3  15    67.5\n4   4  20   160.0\n5   5  25   312.5\n6   6  30   540.0\n7   7  35   857.5\n8   8  40  1280.0\n9   9  45  1822.5\n10 10  50  2500.0\n11 11  55  3327.5\n12 12  60  4320.0\n13 13  65  5492.5\n14 14  70  6860.0\n15 15  75  8437.5\n16 16  80 10240.0\n17 17  85 12282.5\n18 18  90 14580.0\n19 19  95 17147.5\n20 20 100 20000.0\n```\n\n\n:::\n:::\n\n\nOu em ordem decrescente, com o argumento `desc`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 %>% \n  arrange(desc(A))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B       C\n1  20 100 20000.0\n2  19  95 17147.5\n3  18  90 14580.0\n4  17  85 12282.5\n5  16  80 10240.0\n6  15  75  8437.5\n7  14  70  6860.0\n8  13  65  5492.5\n9  12  60  4320.0\n10 11  55  3327.5\n11 10  50  2500.0\n12  9  45  1822.5\n13  8  40  1280.0\n14  7  35   857.5\n15  6  30   540.0\n16  5  25   312.5\n17  4  20   160.0\n18  3  15    67.5\n19  2  10    20.0\n20  1   5     2.5\n```\n\n\n:::\n:::\n\n\n### Função `filter`\n\nCom essa função é possível filtrar linhas do data frame que satisfaçam uma condição específica. Por exemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf4 <- df2 %>% \n  filter(A >= 5)\ndf4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    A   B       C\n1   5  25   312.5\n2   6  30   540.0\n3   7  35   857.5\n4   8  40  1280.0\n5   9  45  1822.5\n6  10  50  2500.0\n7  11  55  3327.5\n8  12  60  4320.0\n9  13  65  5492.5\n10 14  70  6860.0\n11 15  75  8437.5\n12 16  80 10240.0\n13 17  85 12282.5\n14 18  90 14580.0\n15 19  95 17147.5\n16 20 100 20000.0\n```\n\n\n:::\n\n```{.r .cell-code}\ndf5 <- df2 %>% \n  filter(A < 5)\ndf5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  A  B     C\n1 1  5   2.5\n2 2 10  20.0\n3 3 15  67.5\n4 4 20 160.0\n```\n\n\n:::\n\n```{.r .cell-code}\ndf6 <- df2 %>% \n  filter(A == 5)\ndf6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  A  B     C\n1 5 25 312.5\n```\n\n\n:::\n:::\n\n\n### Função `summarise`\n\nCom essa função é possível selecionar uma coluna de interesse e obter medidas estatísticas dela. Com isso é criado um novo data frame as medidas selecionadas. Alguns exemplos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumm <- df2 %>% \n  summarise(media = mean (A),\n            mediana = median(A),\n            sd = sd(A),\n            min = min(A),\n            max = max(A))\nsumm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  media mediana      sd min max\n1  10.5    10.5 5.91608   1  20\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}